#!/bin/bash
# shpm : Main command for shellkit-pm

{
    
    canonpath() {
        builtin type -t realpath.sh &>/dev/null && {
            realpath.sh -f "$@"
            return
        }
        builtin type -t readlink &>/dev/null && {
            command readlink -f "$@"
            return
        }
        # Fallback: Ok for rough work only, does not handle some corner cases:
        ( builtin cd -L -- "$(command dirname -- "$0")" || exit; builtin echo "$(command pwd -P)/$(command basename -- "$0")" )
    }

    [[ -z ${scriptName} ]] && scriptName="$(canonpath "$0")"
    [[ -z ${scriptDir} ]] && scriptDir=$(command dirname -- "${scriptName}")
    #declare scriptBase;scriptBase="$(command basename -- "${scriptName}")"
    #shellcheck disable=2154
    PS4='$( _0=$?; exec 2>/dev/null; realpath -- "${BASH_SOURCE[0]:-?}:${LINENO} ^$_0 ${FUNCNAME[0]:-?}()=>" ) '


    die() {
        builtin echo "ERROR: $*" >&2
        builtin exit 1
    }
    unimplemented() {
        echo "Unimplemented feature: $*" >&2
        exit 1
    }

}



_print_package_status() {
    # When:
    #   $1 = package name
    # Then:
    #   print:
    #      [pkg_name] INSTALLED [version]
    #          // ...   and return 0 if valid  package name.
    #      [pkg_name] not-installed [canon-source value]
    #          // ... if package is defined but not installed, return 1
    #      [pkg_name] ERROR...[msg]
    #          // ... print err and return 2 if undefined package
    local pkgName="$1"
    echo -n "$pkgName "
    read -r xpath version <<< "$(_query_package --detect "${pkgName}")"
    if [[ -e $xpath ]]; then
        echo "INSTALLED ${version}"
        true
    else
        echo "not-installed $(_query_property "${pkgName}.canon-source")";
        false
    fi
}

status() {
    # Print the status of given package(s).  If any package fails,
    # result is non-zero.  Format is:
    #  [index] [package-name] [package-status]
    #  ...or...
    #  [index] ERROR <package-undefined msg>
    [[ $# == 0 ]] && die "No package name(s) provided to status command"
    local result=0
    local index=0
    for pkg_name; do
        echo -n "$(( index++ )) "
        _print_package_status "$pkg_name" 2>&1  | tr '\n' ' '
        echo
    done
    [[ $result -eq  0 ]]
}

_query_package() {
    "${scriptDir}/shellkit-query-package.sh" "$@" 2>/dev/null
}

_query_property() {
    _query_package "$@" | command awk '{print $2}'
    [[ ${PIPESTATUS[0]} -eq 0 ]]
}

config() {
    local cfgPath;cfgPath=$(_find_config)
    [[ -n $cfgPath ]] || die 101
    echo "# Config-found: ${cfgPath}"
    echo "# Content of packages metadata follows:"
    echo "---------------------------------------"
    cat "${cfgPath}"
}

list() {
    for kitname in $(_query_package --package-names); do
        local detect_result;detect_result="$(_query_package --detect "${kitname}")"
        echo -n "${kitname} "
        if [[ -n $detect_result ]]; then
            echo "$detect_result";
        else
            # Is it possibly a virtual package?
            local vpack; vpack=$(_query_package "${kitname}.virtual" 2>/dev/null)
            local vlist
            IFS=' '; read -r _ vlist <<< "$vpack"; unset IFS
            if [[ -n $vlist ]]; then
                echo "(virtual) --> $vlist"
                continue
            else
                echo " --> not installed";
            fi
        fi
        (
            _query_package "${kitname}.desc" "${kitname}.canon-source"
        ) | command sed 's/^/   /'
    done
    true
}

install() {
    "${scriptDir}/install-package.sh" "$@"
}

parseArgs() {
    [[ -z $1 ]] && {
        shellkit-pm-help.sh "${scriptName}"
        exit
    }
    case $1 in
        --help)
            shift
            shellkit-pm-help.sh "${scriptName}"
            exit
            ;;
        --version)
            #help Print version info for shellkit-pm
            shift
            shellkit-pm-version.sh "$@"
            exit
            ;;
        install)
            #help Install [package [package...]] < --local-root dirname >
            shift
            install "$@"
            exit
            ;;
        status)
            #help Print status of [package [package...]]
            shift
            status "$@"
            exit
            ;;
        list)
            #help List package catalog with installation status
            shift
            list "$@"
            exit
            ;;
        config)
            shift
            config "$@"
            exit
            ;;
        config-prop)
            shift
            _query_package "$@"
            exit
            ;;
        *)
            die "Unknown argument: $1"
            ;;
    esac
}

main() {
    parseArgs "$@"
}

[[ -z ${sourceMe} ]] && {
    parseArgs "$@"
}

true
